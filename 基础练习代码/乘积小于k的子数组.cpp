class Solution {
//给定一个正整数数组?nums。
//找出该数组内乘积小于?k?的连续的子数组的个数。
//示例 1:
//输入: nums = [10,5,2,6], k = 100
//输出: 8
//解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。
//需要注意的是 [10,5,2] 并不是乘积小于100的子数组。


public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int left = 0,right = left;
        int size = nums.size();
        int tmp = 1, res = 0;
        //10 5 2 6  100
        while(right < size)
        {
            tmp *= nums[right];
            while(tmp >= k && left <= right)
            {
                tmp /= nums[left++];
            }
            res = res + right - left + 1;
            right++;
        }
        return res;
    }
};