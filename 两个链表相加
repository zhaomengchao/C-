/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 */

class Solution {
public:
    /**
     * 
     * @param head1 ListNode类 
     * @param head2 ListNode类 
     * @return ListNode类
     */
    ListNode* addInList(ListNode* head1, ListNode* head2) {
        // write code here
        stack<int> s1;
        stack<int> s2;
        ListNode* h1 = head1;
        ListNode* h2 = head2;
        
        while(h1)
        {
            s1.push(h1->val);
            h1 = h1->next;
        }
        while(h2)
        {
            s2.push(h2->val);
            h2 = h2->next;
        }
        ListNode* head = new ListNode(0);
        int flag = 0;
        while(!s1.empty() || !s2.empty() || flag != 0)
        {
            int x = 0,y = 0;
            if(!s1.empty())
            {
                x = s1.top();
                s1.pop();
            }
            if(!s2.empty())
            {
                y = s2.top();
                s2.pop();
            }
            int sum  = x + y + flag;
            ListNode* tmp = new ListNode(sum % 10);
            flag = sum / 10;
            tmp->next = head->next;
            head->next = tmp;
        }
        return head->next;
        
    }
};
